import Head from "next/head";
import { useRouter } from "next/router";
import { Button } from "~/components/ui/button";
import { Card } from "~/components/ui/card";
import { Checkbox } from "~/components/ui/checkbox";
import { Input } from "~/components/ui/input";
import { Label } from "~/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "~/components/ui/select";
import { Skeleton } from "~/components/ui/skeleton";
import { useToast } from "~/hooks/use-toast";
import { getKitty, type Kitty, saveKitty } from "~/client/api";
import { useMutation, useQuery } from "@tanstack/react-query";
import { Controller, useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { useVerificationCode } from "~/components/verification/store";

const kittySchema = z.object({
  name: z.string().min(1),
  size: z.string(),
  age: z.coerce.number(),
  vaccine: z.boolean(),
});

export default function SimpleExample() {
  const { query } = useRouter();
  const kittyId = query.kittyId as string;

  const initialDataQuery = useQuery({
    queryKey: ["kitty", kittyId],
    enabled: !!kittyId,
    queryFn: () => {
      return getKitty(kittyId);
    },
  });

  const editForm = useForm({
    values: initialDataQuery.data,
    resolver: zodResolver(kittySchema),
    defaultValues: {
      name: "",
      size: "",
      age: "",
      vaccine: false,
    },
  });

  const { toast } = useToast();
  const { requestCode } = useVerificationCode();
  const saveMutation = useMutation({
    mutationFn: async (data: Kitty) => {
      await requestCode((code) => saveKitty(kittyId, data, code));
    },
    onSuccess: () =>
      toast({
        title: "Exito!",
        description: "Gatito guardado exitosamente",
      }),
  });

  const onSave = editForm.handleSubmit(
    (data) => saveMutation.mutate(data),
    (e) => {
      console.error(e);
    },
  );

  return (
    <>
      <Head>
        <title>Applicación</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-start">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16">
          <h1 className="text-3xl font-extrabold tracking-tight sm:text-[3rem]">
            Formulario
          </h1>
          {initialDataQuery.isError ? (
            <span className="text-red-500">Error al cargar datos</span>
          ) : (
            <></>
          )}
          {initialDataQuery.isLoading ? (
            <Skeleton className="h-[500px] min-w-96 rounded-xl" />
          ) : (
            <Card className="px-8 py-6 md:min-w-96">
              <h2 className="mb-4 w-full text-2xl font-bold tracking-tight sm:text-[2rem]">
                Michi
              </h2>
              <div className="flex flex-col gap-4">
                <div>
                  <Label htmlFor="name">Nombre</Label>
                  <Input {...editForm.register("name")}></Input>
                </div>
                <div>
                  <Label>Tamaño</Label>
                  <Controller
                    name="size"
                    control={editForm.control}
                    render={({ field }) => (
                      <Select
                        value={field.value}
                        onValueChange={field.onChange}
                      >
                        <SelectTrigger className="w-full">
                          <SelectValue placeholder="" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="big">Enorme</SelectItem>
                          <SelectItem value="mid">Normal</SelectItem>
                          <SelectItem value="small">Chiquito</SelectItem>
                        </SelectContent>
                      </Select>
                    )}
                  />
                </div>
                <div>
                  <Label htmlFor="age">Edad</Label>
                  <Input type="number" {...editForm.register("age")}></Input>
                </div>
                <div className="flex gap-2 py-2">
                  <Controller
                    name="vaccine"
                    control={editForm.control}
                    render={({ field }) => (
                      <Checkbox
                        name="vaccine"
                        checked={field.value}
                        onCheckedChange={field.onChange}
                      />
                    )}
                  />
                  <Label htmlFor="vaccine">Vacunado</Label>
                </div>
              </div>
              <div className="flex w-full flex-col items-center gap-2 pt-4">
                <Button
                  className="w-full"
                  onClick={onSave}
                  loading={saveMutation.isPending}
                >
                  Guardar
                </Button>
                {saveMutation.isError ? (
                  <span className="text-red-500">Error al Guardar</span>
                ) : (
                  <></>
                )}
              </div>
            </Card>
          )}
        </div>
      </main>
    </>
  );
}
